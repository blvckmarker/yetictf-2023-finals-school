name: Docker merc2023

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches: [ "main", "service/merc2023" ]
    paths:
      - 'merc2023/**'
      - '.github/workflows/docker-merc2023.yml'

env:
  REGISTRY: ghcr.io
  SERVICE_NAME: merc2023
  IMAGE_NAME: ${{ github.repository_owner }}/merc2023


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Extract build args 
        id: build-args
        run: cat ./${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/.env >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./merc2023/merc2023/
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          build-args: | 
            "DB_PASSWORD=${{ steps.build-args.outputs.DB_PASSWORD }}"
            "APACHE_RUN_USER=${{ steps.build-args.outputs.APACHE_RUN_USER }}"

  checker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Prepare host
        run: if [[ -f prepare_host.sh ]]; then bash prepare_host.sh; fi
        working-directory: ${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - name: docker compose up
        run: docker compose up -d --remove-orphans --quiet-pull --wait --no-build
        env: 
          IMAGE: ${{ steps.meta.outputs.tags }}
        working-directory: ${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - name: Get Host IP addr
        id: ip-addr
        run: |
          if=$(ip r | grep default | awk -F' ' '{print $5}')
          ipaddr=$(ip -4 addr show $if | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
          echo "ipaddr=$ipaddr" >> $GITHUB_OUTPUT
    
      - run: docker compose ps
        working-directory: ${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - name: Setting up checker Dockerfile
        run: |
          cat << EOF > Dockerfile.${{ env.SERVICE_NAME }}
          FROM ghcr.io/n57uctf/worker:dev
          COPY checker/* /code/checkers/
          RUN ls -al /code/checkers/ && pip install --no-cache-dir --upgrade -r /code/checkers/requirements.txt
          EOF
        working-directory: ${{ env.SERVICE_NAME }}/
      
      - run: |
          image=$(docker build -q -f Dockerfile.${{ env.SERVICE_NAME }} .)
          echo "image=$image" >> $GITHUB_OUTPUT
        id: checker-image
        working-directory: ${{ env.SERVICE_NAME }}/
      
      - name: Checker push, place 0
        id: checker-push-0
        run: |
          set +e
          docker run -v /tmp/private_${{ github.run_id }}/:/out/ --rm ${{ steps.checker-image.outputs.image }} python -c '
          from checkers.checker import push,PushArgs;
          r=push(PushArgs(host="${{ steps.ip-addr.outputs.ipaddr }}",round_number=1,flag="${{ github.sha }}"));
          open("/out/push_${{ github.run_id }}","w").write(f"private_info={r.private_info}");
          print(r);
          exit(r.status)'

          exitcode=$?
          echo "exitcode=$exitcode" 
          cat /tmp/private_${{ github.run_id }}/push_${{ github.run_id }} | tee -a "${GITHUB_OUTPUT}"
          if [[ $exitcode -ne "101" ]]; then exit $exitcode; fi
          exit 0
        env: 
          PUSH_PLACE: 0

      - name: Checker pull, place 0
        id: checker-pull-0
        run: |
          set +e
          docker run -v /tmp/private_${{ github.run_id }}/:/out/ --rm ${{ steps.checker-image.outputs.image }} python -c '
          from checkers.checker import pull,PullArgs;
          r=pull(PullArgs(host="${{ steps.ip-addr.outputs.ipaddr }}",private_info='\''${{ steps.checker-push-0.outputs.private_info }}'\'',flag="${{ github.sha }}"));
          open("/out/pull_${{ github.run_id }}","w").write(f"private_info={r.private_info}");
          print(r);
          exit(r.status)'
          
          exitcode=$?
          echo "exitcode=$exitcode" 
          cat /tmp/private_${{ github.run_id }}/pull_${{ github.run_id }} | tee -a "${GITHUB_OUTPUT}"
          if [[ $exitcode -ne "101" ]]; then exit $exitcode; fi
          exit 0

      - name: (DEBUG) Show applications folder
        if: ${{ failure() && (steps.checker-push-0.conclusion == 'failure' || steps.checker-pull-0.conclusion == 'failure')  }}
        run: |
          echo "--- HOST ---"
          id 
          ls -alh ./source/applications
          echo "--- DOCKER ---"
          docker compose exec webserver id
          docker compose exec webserver ls -alh /var/www/html/applications
        working-directory: ${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - name: Checker push, place 1
        id: checker-push-1
        run: |
          set +e
          docker run -v /tmp/private_${{ github.run_id }}/:/out/ --rm ${{ steps.checker-image.outputs.image }} python -c '
          from checkers.checker import push,PushArgs;
          r=push(PushArgs(host="${{ steps.ip-addr.outputs.ipaddr }}",round_number=1,flag="${{ github.sha }}"));
          open("/out/push_${{ github.run_id }}","w").write(f"private_info={r.private_info}");
          print(r);
          exit(r.status)'

          exitcode=$?
          echo "exitcode=$exitcode" 
          cat /tmp/private_${{ github.run_id }}/push_${{ github.run_id }} | tee -a "${GITHUB_OUTPUT}"
          if [[ $exitcode -ne "101" ]]; then exit $exitcode; fi
          exit 0
        env: 
          PUSH_PLACE: 1
  
      - name: Checker pull, place 1
        id: checker-pull-1
        run: |
          set +e
          docker run -v /tmp/private_${{ github.run_id }}/:/out/ --rm ${{ steps.checker-image.outputs.image }} python -c '
          from checkers.checker import pull,PullArgs;
          r=pull(PullArgs(host="${{ steps.ip-addr.outputs.ipaddr }}",private_info='\''${{ steps.checker-push-1.outputs.private_info }}'\'',flag="${{ github.sha }}"));
          open("/out/pull_${{ github.run_id }}","w").write(f"private_info={r.private_info}");
          print(r);
          exit(r.status)'
          
          exitcode=$?
          echo "exitcode=$exitcode" 
          cat /tmp/private_${{ github.run_id }}/pull_${{ github.run_id }} | tee -a "${GITHUB_OUTPUT}"
          if [[ $exitcode -ne "101" ]]; then exit $exitcode; fi
          exit 0

      - run: (DEBUG) docker compose logs webserver
        if: ${{ failure() }}
        working-directory: ./${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - run: (DEBUG) docker compose logs postgres
        if: ${{ failure() }}
        working-directory: ./${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/

      - run: docker rmi -f ${{ steps.checker-image.outputs.image }}
        if: ${{ always() }}

      - name: docker compose down
        run: docker compose down --remove-orphans --rmi all --volumes
        if: ${{ always() }}
        working-directory: ${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}/